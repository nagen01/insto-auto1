# -*- coding: utf-8 -*-
"""Currency Converter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eBxjABetNzjtJgFEOfnTUPOFdrJmVtJG

# This program convert a given currency from one to another
For example:

User input:  AUD 100.00 in USD

Output    :  AUD 100.00 = USD 83.71
"""

#import important libraries:
import pandas as pd
import re

#Loading conversion rate, cross conversion table etc...
cr = pd.read_csv("/content/sample_data/Conversion rate.csv", header = None, names = ['from-to','conversion_rate'])
cct = pd.read_csv("/content/sample_data/Cross conversion table.csv")
op = pd.read_csv("/content/sample_data/Output Precision.csv", header = None, names = ['country', 'no_of_decimal_places', 'dec'])

#Get the user input in desired format:
pattern = re.compile("^[a-zA-Z]{3}\s\d+.\d{2}\sin\s[a-zA-Z]{3}$") #Required format
print("Enter value to be converted from one currency to another in 'AUD 100.00 in USD' format:")
user_input = input("")
while not pattern.match(user_input):
  print("Desired input format : 'AUD 100.00 in USD', Enter 'q' and for exit")
  user_input = input("")
  if user_input == 'q':
    break

#Note: User_input other than given format will not hold good, help to test with the required format only.....

#Checking in cross conversion table
def f_conversion_method(from_curr, to_curr):
  conversion_method = cct.loc[cct['/'] == from_curr][to_curr].values
  return conversion_method

#Function for concatinating the currencies
def cr_concat(from_curr, to_curr):
  from_to_curr = from_curr + to_curr
  return from_to_curr

#Functions for direct conversion 
def d_convert(fr_val,cr_rate_id):
  return float(fr_val)*cr.loc[cr['from-to'] == cr_rate_id]['conversion_rate'].values

#Function for inverted conversion
def inv_convert(fr_val,cr_rate_id):
  cr_rate_id = cr_rate_id[3:6] + cr_rate_id[:3]
  return float(fr_val)*(1/cr.loc[cr['from-to'] == cr_rate_id]['conversion_rate'].values)

#Function for self conversion
def one_to_one_convert():
  return f_value

#Function for converting the value
def convrt(fr_val, from_curr, to_curr):
  cr_rate_id = cr_concat(from_curr, to_curr)
  if f_conversion_method(from_curr,to_curr) == 'D':
    op_val = d_convert(fr_val,cr_rate_id)
  elif f_conversion_method(from_curr,to_curr) == 'Inv':
    op_val = inv_convert(fr_val,cr_rate_id)
  elif f_conversion_method(from_curr,to_curr) == '1:1':
    op_val = one_to_one_convert()
  else:
    print(f"Unable to find rate for {f_curr}/{t_curr}")
  return op_val

#Checking for currencies availability entered by user:
list_ccr = cct["/"].to_list() #Converting currency column in to list

if user_input != 'q':
  #Seperating the input into parts for further processing:
  from_curr = user_input[0:3].upper()
  from_value = float(user_input[4:-7])
  to_curr = user_input[-3:].upper()

  #Storing values for future use:
  f_curr = from_curr
  f_value = user_input[4:-7]
  t_curr = to_curr
  
  #Main processing to get the desired result:
  if f_curr and t_curr in list_ccr:
    if f_conversion_method(from_curr,to_curr) not in list_ccr:
      op_val = convrt(from_value,from_curr, to_curr)
    else:
      i_conver_method = f_conversion_method(from_curr,to_curr)
      i_op_val = convrt(from_value,from_curr, i_conver_method[0])
      op_val = convrt(i_op_val,i_conver_method[0], to_curr)

    #Finding the number of decimal points in output:
    k = int(op.loc[op['country'] == t_curr]['no_of_decimal_places'].values)

    #Printing the final output:
    if f_curr == t_curr:
      if k == 0:
        f_value = f_value[:-3]
      print(f"{f_curr} {f_value} = {t_curr} {f_value}")
    else:
      print(f"{f_curr} {f_value} = {t_curr} {round(op_val[0],k)}")
  else:
    print(f"Unable to find rate for {f_curr}/{t_curr}")
else:
  print("Hope you enjoyed, Thanks for visiting...")

"""#Some Results:
All the below inputs entered manyally during program execution and passed successfully....

Input: EUR 100.00 in NOK      >>>>>>>>>>   Output: EUR 100.00 = NOK 866.51

Input: NOK 866.00 in EUR      >>>>>>>>>>   Output: NOK 866.00 = EUR 99.94

Input: EUR 100.00 in CZK      >>>>>>>>>>   Output: EUR 100.00 = CZK 2760.28

Input: CZK 2760.28 in EUR      >>>>>>>>>>  Output: CZK 2760.28 = EUR 100.0

Input: DKK 100.00 in DKK       >>>>>>>>>>  Output: DKK 100.00 = DKK 100.00

Input: NOK 2760.28 in DKD      >>>>>>>>>>Output: Unable to find rate for NOK/DKD

Input: EUR 100.00 in DKK       >>>>>>>>>>  Output: EUR 100.00 = DKK 744.05

Input: DKK 744.00 in EUR       >>>>>>>>>>  Output: DKK 744.00 = EUR 99.99
"""

